# .github/workflows/your-workflow-file.yml
on: [push, pull_request, workflow_dispatch]

jobs:
  get_timestamp: # Job 1: Gets the timestamp
    runs-on: ubuntu-latest
    outputs:
      # Define an output for the timestamp
      timestamp_output: ${{ steps.timestamp_step.outputs.timestamp }}
    steps:
      - name: Get Timestamp
        id: timestamp_step # Give the step an ID to reference its outputs
        run: |
          # Get the timestamp in a filename-safe ISO-like format
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          # Set the timestamp as a step output using GITHUB_OUTPUT (required for job outputs)
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          # Also set as env var for clarity, though output is what matters for passing between jobs
          echo "BUILD_TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

  build: # Job 2: Calls the reusable workflow
    runs-on: ubuntu-latest
    # This job needs the timestamp from the first job
    needs: get_timestamp
    # Call the reusable workflow directly under the job key
    uses: zmkfirmware/zmk/.github/workflows/build-user-config.yml@main
    with:
      # Pass the timestamp output from the previous job as an input
      archive_name: firmware-${{ needs.get_timestamp.outputs.timestamp_output }}
      # ... include any other necessary inputs from the ZMK workflow ...
      # build_matrix_path: your/matrix/path.yaml
      # config_path: your/config/dir
      # fallback_binary: bin
    secrets: inherit # Inherit secrets
